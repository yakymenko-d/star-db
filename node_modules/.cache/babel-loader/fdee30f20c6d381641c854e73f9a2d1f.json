{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResourse(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"Couldn't fetch \".concat(url, \", recieved \").concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResourse(\"/people/\");\n    return res.results.map(this._transformPerson);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(\"/people/\".concat(id, \"/\"));\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(\"/planets/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse(\"/starships/\");\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(\"/starships/\".concat(id, \"/\"));\n    return this._transformStarship(starship);\n  }\n\n  _transformPlanet(planet) {\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    };\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/dev/Documents/Projects/ReactRedux/react-apps/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getResourse","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","name","population","rotationPeriod","rotation_period","diameter","_extractId","model","manufacturer","costInCredits","length","crew","passengers","cargoCapacity","gender","birthYear","eyeColor"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAAA;AAAA,SAEhCC,QAFgC,GAErB,sBAFqB;AAAA;;AAIhC,QAAMC,WAAN,CAAkBC,GAAlB,EAAuB;AACrB,UAAMC,GAAG,GAAG,MAAMC,KAAK,WAAK,KAAKJ,QAAV,SAAqBE,GAArB,EAAvB;;AAEA,QAAG,CAACC,GAAG,CAACE,EAAR,EAAY;AACV,YAAM,IAAIC,KAAJ,0BAA4BJ,GAA5B,wBAA6CC,GAAG,CAACI,MAAjD,EAAN;AACD;;AAED,WAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACD;;AAED,QAAMC,YAAN,GAAqB;AACnB,UAAMN,GAAG,GAAG,MAAM,KAAKF,WAAL,YAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYC,GAAZ,CAAgB,KAAKC,gBAArB,CAAP;AACD;;AAED,QAAMC,SAAN,CAAgBC,EAAhB,EAAoB;AAClB,UAAMC,MAAM,GAAG,MAAM,KAAKd,WAAL,mBAA4Ba,EAA5B,OAArB;AACA,WAAO,KAAKF,gBAAL,CAAsBG,MAAtB,CAAP;AACD;;AAED,QAAMC,aAAN,GAAsB;AACpB,UAAMb,GAAG,GAAG,MAAM,KAAKF,WAAL,aAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYC,GAAZ,CAAgB,KAAKM,gBAArB,CAAP;AACD;;AAED,QAAMC,SAAN,CAAgBJ,EAAhB,EAAoB;AAClB,UAAMK,MAAM,GAAG,MAAM,KAAKlB,WAAL,oBAA6Ba,EAA7B,OAArB;AACA,WAAO,KAAKG,gBAAL,CAAsBE,MAAtB,CAAP;AACD;;AAED,QAAMC,eAAN,GAAwB;AACtB,UAAMjB,GAAG,GAAG,MAAM,KAAKF,WAAL,eAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYC,GAAZ,CAAgB,KAAKU,kBAArB,CAAP;AACD;;AAED,QAAMC,WAAN,CAAkBR,EAAlB,EAAsB;AACpB,UAAMS,QAAQ,GAAG,MAAM,KAAKtB,WAAL,sBAA+Ba,EAA/B,OAAvB;AACA,WAAO,KAAKO,kBAAL,CAAwBE,QAAxB,CAAP;AACD;;AAIDN,EAAAA,gBAAgB,CAACE,MAAD,EAAS;AAGvB,WAAO;AACLL,MAAAA,EADK;AAELU,MAAAA,IAAI,EAAEL,MAAM,CAACK,IAFR;AAGLC,MAAAA,UAAU,EAAEN,MAAM,CAACM,UAHd;AAILC,MAAAA,cAAc,EAAEP,MAAM,CAACQ,eAJlB;AAKLC,MAAAA,QAAQ,EAAET,MAAM,CAACS;AALZ,KAAP;AAOD;;AAEDP,EAAAA,kBAAkB,CAACE,QAAD,EAAW;AAC3B,WAAO;AACLT,MAAAA,EAAE,EAAE,KAAKe,UAAL,CAAgBN,QAAhB,CADC;AAELC,MAAAA,IAAI,EAAED,QAAQ,CAACC,IAFV;AAGLM,MAAAA,KAAK,EAAEP,QAAQ,CAACO,KAHX;AAILC,MAAAA,YAAY,EAAER,QAAQ,CAACQ,YAJlB;AAKLC,MAAAA,aAAa,EAAET,QAAQ,CAACS,aALnB;AAMLC,MAAAA,MAAM,EAAEV,QAAQ,CAACU,MANZ;AAOLC,MAAAA,IAAI,EAAEX,QAAQ,CAACW,IAPV;AAQLC,MAAAA,UAAU,EAAEZ,QAAQ,CAACY,UARhB;AASLC,MAAAA,aAAa,EAAEb,QAAQ,CAACa;AATnB,KAAP;AAWD;;AAEDxB,EAAAA,gBAAgB,CAACG,MAAD,EAAS;AACvB,WAAO;AACLD,MAAAA,EAAE,EAAE,KAAKe,UAAL,CAAgBd,MAAhB,CADC;AAELS,MAAAA,IAAI,EAAET,MAAM,CAACS,IAFR;AAGLa,MAAAA,MAAM,EAAEtB,MAAM,CAACsB,MAHV;AAILC,MAAAA,SAAS,EAAEvB,MAAM,CAACuB,SAJb;AAKLC,MAAAA,QAAQ,EAAExB,MAAM,CAACwB;AALZ,KAAP;AAOD;;AAhF+B","sourcesContent":["export default class SwapiService {\n\n  _apiBase = 'https://swapi.co/api';\n\n  async getResourse(url) {\n    const res = await fetch (`${this._apiBase}${url}`);\n\n    if(!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved ${res.status}`)\n    }\n\n    return await res.json()\n  };\n\n  async getAllPeople() {\n    const res = await this.getResourse(`/people/`);\n    return res.results.map(this._transformPerson);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(`/people/${id}/`);\n    return this._transformPerson(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse(`/starships/`);\n    return res.results.map(this._transformStarship);\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(`/starships/${id}/`);\n    return this._transformStarship(starship);\n  }\n\n  \n\n  _transformPlanet(planet) {\n\n\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter,\n    }\n  }\n\n  _transformStarship(starship) {\n    return {\n      id: this._extractId(starship),\n      name: starship.name,\n      model: starship.model,\n      manufacturer: starship.manufacturer,\n      costInCredits: starship.costInCredits,\n      length: starship.length,\n      crew: starship.crew,\n      passengers: starship.passengers,\n      cargoCapacity: starship.cargoCapacity\n    }\n  }\n\n  _transformPerson(person) {\n    return {\n      id: this._extractId(person),\n      name: person.name,\n      gender: person.gender,\n      birthYear: person.birthYear,\n      eyeColor: person.eyeColor\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}