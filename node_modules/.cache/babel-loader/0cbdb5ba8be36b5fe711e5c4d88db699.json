{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResourse(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"Couldn't fetch \".concat(url, \", recieved \").concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  async getAllPeople() {\n    const res = await this.getResourse(\"/people/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(\"/people/\".concat(id, \"/\"));\n    return this._transformPlanet(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(\"/planets/\");\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(\"/planets/\".concat(id, \"/\"));\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse(\"/starships/\");\n    return res.results;\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(\"/starships/\".concat(id, \"/\"));\n    return this._transformPlanet(starship);\n  }\n\n  _transformPlanet(planet) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    const id = planet.idRegExp.match(idRegExp)[1];\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter\n    };\n  }\n\n}\nconst swapi = new SwapiService();\nswapi.getPlanet(2).then(p => {\n  console.log(p.name);\n});","map":{"version":3,"sources":["/Users/dev/Documents/Projects/ReactRedux/react-apps/star-db/src/services/swapi-service.js"],"names":["SwapiService","_apiBase","getResourse","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPlanet","getPerson","id","person","getAllPlanets","getPlanet","planet","getAllStarships","getStarship","starship","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","swapi","then","p","console","log"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAAA;AAAA,SAEhCC,QAFgC,GAErB,sBAFqB;AAAA;;AAIhC,QAAMC,WAAN,CAAkBC,GAAlB,EAAuB;AACrB,UAAMC,GAAG,GAAG,MAAMC,KAAK,WAAK,KAAKJ,QAAV,SAAqBE,GAArB,EAAvB;;AAEA,QAAG,CAACC,GAAG,CAACE,EAAR,EAAY;AACV,YAAM,IAAIC,KAAJ,0BAA4BJ,GAA5B,wBAA6CC,GAAG,CAACI,MAAjD,EAAN;AACD;;AAED,WAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACD;;AAED,QAAMC,YAAN,GAAqB;AACnB,UAAMN,GAAG,GAAG,MAAM,KAAKF,WAAL,YAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYC,GAAZ,CAAgB,KAAKC,gBAArB,CAAP;AACD;;AAED,QAAMC,SAAN,CAAgBC,EAAhB,EAAoB;AAClB,UAAMC,MAAM,GAAG,MAAM,KAAKd,WAAL,mBAA4Ba,EAA5B,OAArB;AACA,WAAO,KAAKF,gBAAL,CAAsBG,MAAtB,CAAP;AACD;;AAED,QAAMC,aAAN,GAAsB;AACpB,UAAMb,GAAG,GAAG,MAAM,KAAKF,WAAL,aAAlB;AACA,WAAOE,GAAG,CAACO,OAAJ,CAAYC,GAAZ,CAAgB,KAAKC,gBAArB,CAAP;AACD;;AAED,QAAMK,SAAN,CAAgBH,EAAhB,EAAoB;AAClB,UAAMI,MAAM,GAAG,MAAM,KAAKjB,WAAL,oBAA6Ba,EAA7B,OAArB;AACA,WAAO,KAAKF,gBAAL,CAAsBM,MAAtB,CAAP;AACD;;AAED,QAAMC,eAAN,GAAwB;AACtB,UAAMhB,GAAG,GAAG,MAAM,KAAKF,WAAL,eAAlB;AACA,WAAOE,GAAG,CAACO,OAAX;AACD;;AAED,QAAMU,WAAN,CAAkBN,EAAlB,EAAsB;AACpB,UAAMO,QAAQ,GAAG,MAAM,KAAKpB,WAAL,sBAA+Ba,EAA/B,OAAvB;AACA,WAAO,KAAKF,gBAAL,CAAsBS,QAAtB,CAAP;AACD;;AAEDT,EAAAA,gBAAgB,CAACM,MAAD,EAAS;AACvB,UAAMI,QAAQ,GAAE,eAAhB;AACA,UAAMR,EAAE,GAAGI,MAAM,CAACI,QAAP,CAAgBC,KAAhB,CAAsBD,QAAtB,EAAgC,CAAhC,CAAX;AAEA,WAAO;AACLR,MAAAA,EADK;AAELU,MAAAA,IAAI,EAAEN,MAAM,CAACM,IAFR;AAGLC,MAAAA,UAAU,EAAEP,MAAM,CAACO,UAHd;AAILC,MAAAA,cAAc,EAAER,MAAM,CAACS,eAJlB;AAKLC,MAAAA,QAAQ,EAAEV,MAAM,CAACU;AALZ,KAAP;AAOD;;AAvD+B;AA0DlC,MAAMC,KAAK,GAAG,IAAI9B,YAAJ,EAAd;AAEA8B,KAAK,CAACZ,SAAN,CAAgB,CAAhB,EAAmBa,IAAnB,CAAyBC,CAAD,IAAO;AAC7BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACP,IAAd;AACD,CAFD","sourcesContent":["export default class SwapiService {\n\n  _apiBase = 'https://swapi.co/api';\n\n  async getResourse(url) {\n    const res = await fetch (`${this._apiBase}${url}`);\n\n    if(!res.ok) {\n      throw new Error(`Couldn't fetch ${url}, recieved ${res.status}`)\n    }\n\n    return await res.json()\n  };\n\n  async getAllPeople() {\n    const res = await this.getResourse(`/people/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPerson(id) {\n    const person = await this.getResourse(`/people/${id}/`);\n    return this._transformPlanet(person);\n  }\n\n  async getAllPlanets() {\n    const res = await this.getResourse(`/planets/`);\n    return res.results.map(this._transformPlanet);\n  }\n\n  async getPlanet(id) {\n    const planet = await this.getResourse(`/planets/${id}/`);\n    return this._transformPlanet(planet);\n  }\n\n  async getAllStarships() {\n    const res = await this.getResourse(`/starships/`);\n    return res.results;\n  }\n\n  async getStarship(id) {\n    const starship = await this.getResourse(`/starships/${id}/`);\n    return this._transformPlanet(starship);\n  }\n\n  _transformPlanet(planet) {\n    const idRegExp =/\\/([0-9]*)\\/$/;\n    const id = planet.idRegExp.match(idRegExp)[1];\n\n    return {\n      id,\n      name: planet.name,\n      population: planet.population,\n      rotationPeriod: planet.rotation_period,\n      diameter: planet.diameter,\n    }\n  }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getPlanet(2).then((p) => {\n  console.log(p.name);\n});\n"]},"metadata":{},"sourceType":"module"}