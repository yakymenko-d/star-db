{"ast":null,"code":"class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.co/api';\n  }\n\n  async getResourse(url) {\n    const res = await fetch(\"\".concat(this._apiBase).concat(url));\n\n    if (!res.ok) {\n      throw new Error(\"Couldn't fetch \".concat(url) + \", recieved \".concat(res.status));\n    }\n\n    return await res.json();\n  }\n\n  getAllPeople() {\n    const res = this.getResourse(\"/people/\");\n    return res.results;\n  }\n\n  getPerson(id) {\n    return this.getResourse(\"/people/\".concat(id, \"/\"));\n  }\n\n}\n\nconst swapi = new SwapiService();\nswapi.getAllPeople().then(people => {\n  people;\n});","map":{"version":3,"sources":["/Users/dev/Documents/Projects/ReactRedux/react-apps/star-db/src/index.js"],"names":["SwapiService","_apiBase","getResourse","url","res","fetch","ok","Error","status","json","getAllPeople","results","getPerson","id","swapi","then","people"],"mappings":"AAAA,MAAMA,YAAN,CAAmB;AAAA;AAAA,SAEjBC,QAFiB,GAEN,sBAFM;AAAA;;AAIjB,QAAMC,WAAN,CAAkBC,GAAlB,EAAuB;AACrB,UAAMC,GAAG,GAAG,MAAMC,KAAK,WAAK,KAAKJ,QAAV,SAAqBE,GAArB,EAAvB;;AAEA,QAAG,CAACC,GAAG,CAACE,EAAR,EAAY;AACV,YAAM,IAAIC,KAAJ,CAAU,yBAAkBJ,GAAlB,yBAAwCC,GAAG,CAACI,MAA5C,CAAV,CAAN;AACD;;AAED,WAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAMN,GAAG,GAAG,KAAKF,WAAL,YAAZ;AACA,WAAOE,GAAG,CAACO,OAAX;AACD;;AAEDC,EAAAA,SAAS,CAACC,EAAD,EAAK;AACZ,WAAO,KAAKX,WAAL,mBAA4BW,EAA5B,OAAP;AACD;;AArBgB;;AAwBnB,MAAMC,KAAK,GAAG,IAAId,YAAJ,EAAd;AAEAc,KAAK,CAACJ,YAAN,GAAqBK,IAArB,CAA2BC,MAAD,IAAY;AACpCA,EAAAA,MAAM;AACP,CAFD","sourcesContent":["class SwapiService {\n\n  _apiBase = 'https://swapi.co/api';\n\n  async getResourse(url) {\n    const res = await fetch (`${this._apiBase}${url}`);\n\n    if(!res.ok) {\n      throw new Error(`Couldn't fetch ${url}` + `, recieved ${res.status}`)\n    }\n\n    return await res.json()\n  };\n\n  getAllPeople() {\n    const res = this.getResourse(`/people/`);\n    return res.results;\n  }\n\n  getPerson(id) {\n    return this.getResourse(`/people/${id}/`);\n  }\n}\n\nconst swapi = new SwapiService();\n\nswapi.getAllPeople().then((people) => {\n  people\n});\n"]},"metadata":{},"sourceType":"module"}